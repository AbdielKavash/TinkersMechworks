/*
 * TMechworks
 * Master build file
 * based on TConstruct's master build file
 * Authors: Sunstrike, ProgWML6
 * Help from AbrarSyed
 */

buildscript {
    repositories {
        mavenCentral()
		mavenLocal()
        maven {
            name = 'ForgeFS'
            url = 'http://files.minecraftforge.net/maven'
        }
		maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }

	}
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

repositories {
  maven {
        name 'CB Maven FS'
        url "http://chickenbones.net/maven/"
    }
	maven {
         name "ProfMobius Maven FS"
         url "http://mobiusstrip.eu/maven"
     }
    maven {
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
	maven {
          name 'ForgeFS'
          url 'http://files.minecraftforge.net/maven'
     }
}

apply plugin: 'forge'
group = 'tmech'
// define the properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

dependencies {
    compile "mantle:Mantle:${config.minecraft_version}-${config.mantle_version}:deobf"
    compile "tconstruct:TConstruct:${config.minecraft_version}-${config.tconstruct_version}:deobf"
}

// sets version to the slimeKnights default version format
task buildInfo {
    def cmd = "git rev-parse --short HEAD"
    def proc = cmd.execute()
    proc.waitFor()
    if (proc.exitValue() == 0) {
        ext.revision = proc.text.trim()
    } else {
        ext.revision = "GITBORK"
    }

    if (System.getenv().BUILD_NUMBER != null) {
        ext.buildNum = System.getenv().BUILD_NUMBER
    } else {
        ext.buildNum = "DEV.${project.buildInfo.revision}"
    }
}
ext.artifact_version = 'NFG'
if (System.getenv().ARTIFACT_VERSION == null) {
    artifact_version = "${config.mod_version}.${project.buildInfo.buildNum}"
}
if (System.getenv().ARTIFACT_VERSION != null) {
    artifact_version = "${system.getenv().ARTIFACT_VERSION}"
}

version = "${config.minecraft_version}-${artifact_version}"

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    runDir = 'run'
    replace '${version}', artifact_version
}

sourceSets {
	main {
		resources {
			srcDir 'resources'
		}
	}
}
processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.artifact_version
    inputs.property "mcversion", project.minecraft.version
	
        // replace stuff in text files, not binary ones.
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
                // replace version and MCVersion
        expand 'version':artifact_version,'MCversion':config.minecraft_version
    }
        
        // copy everything else, thats not text
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
    }
}
task deobfJar(type: Jar) {
        from sourceSets.main.output
        classifier = 'deobf'
}
task libJar(type: Jar) {
    from(sourceSets.main.java) {
      include "tmechworks/lib/*"
	}
	classifier = 'lib'
}
artifacts {
        archives deobfJar
		archives libJar
}

task("uploadJars", dependsOn:"build") {
    
    description = "uploads JARs"

    if (project.hasProperty("local_maven")) {
	    apply plugin: 'maven'
            uploadArchives {
                repositories {
                    mavenDeployer {
                        repository(url: "file://${local_maven}")
                }
            }
        }
    }
}
